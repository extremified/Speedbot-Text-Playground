#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
left_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)
right_drive_smart = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)
drivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)


# wait for rotation sensor to fully initialize
wait(30, MSEC)


#endregion VEXcode Generated Robot Configuration

# ----------------------------------------------------------------------------
#                                                                            
#    Project:                                        
#    Author:  
#    Created:
#    Configuration: V5 Speedbot (Drivetrain 2-motor, No Gyro)     
#                                                                            
# ----------------------------------------------------------------------------

# Library imports
from vex import *

# Begin project code

## Patient 1 (Start to Pharmacy to Patient 1 to Pharmacy)
#drivetrain.set_turn_velocity(30, PERCENT)
# Start to Pharmacy
drivetrain.drive_for(FORWARD, 800, MM)
drivetrain.turn_for(LEFT, 90, DEGREES)
drivetrain.drive_for(FORWARD, 1200, MM)
drivetrain.turn_for(RIGHT, 103, DEGREES)
drivetrain.drive_for(FORWARD, 700, MM)
wait(5, SECONDS)

#Pharmacy to Patient 1
drivetrain.drive_for(REVERSE, 700, MM)
wait(0.5, SECONDS)
drivetrain.turn_for(LEFT, 95, DEGREES)
drivetrain.drive_for(REVERSE, 550, MM)
wait(0.5, SECONDS)
drivetrain.turn_for(RIGHT, 103, DEGREES)
drivetrain.drive_for(FORWARD, 700, MM)
wait(3, SECONDS)

#Patient 1 to Pharmacy
drivetrain.drive_for(REVERSE, 700, MM)
drivetrain.turn_for(LEFT, 95, DEGREES)
drivetrain.drive_for(FORWARD, 600, MM)
drivetrain.turn_for(RIGHT, 103, DEGREES)
drivetrain.drive_for(FORWARD, 700, MM)
wait(5, SECONDS)


## Patient 2

#Pharmacy to Elevator
drivetrain.drive_for(REVERSE, 700, MM)
drivetrain.turn_for(RIGHT, 103, DEGREES)
drivetrain.drive_for(FORWARD, 1200, MM)
drivetrain.turn_for(LEFT, 95, DEGREES)
drivetrain.drive_for(FORWARD, 800, MM)
wait(5, SECONDS)

# Elevator to Patient 2
drivetrain.drive_for(REVERSE, 800, MM)
drivetrain.turn_for(LEFT, 95, DEGREES)
drivetrain.drive_for(FORWARD, 1200, MM)
drivetrain.turn_for(LEFT, 95, DEGREES)
drivetrain.drive_for(FORWARD, 800, MM)
wait(3, SECONDS)

# Patient 2 to Elevator
drivetrain.drive_for(REVERSE, 800, MM)
drivetrain.turn_for(LEFT, 95, DEGREES)
drivetrain.drive_for(FORWARD, 1175, MM)
drivetrain.turn_for(LEFT, 95, DEGREES)
drivetrain.drive_for(FORWARD, 800, MM)
wait(5, SECONDS)

#Elevator to Pharmacy
drivetrain.drive_for(REVERSE, 800, MM)
drivetrain.turn_for(LEFT, 95, DEGREES)
drivetrain.drive_for(FORWARD, 1200, MM)
drivetrain.turn_for(RIGHT, 103, DEGREES)
drivetrain.drive_for(FORWARD, 700, MM)
wait(5, SECONDS)


## Patient 3 (Pharmacy to Elevator to Patient 3 to Elevator to Pharmacy)

# Pharmacy to Elevator
drivetrain.drive_for(REVERSE, 700, MM)
drivetrain.turn_for(RIGHT, 103, DEGREES)
drivetrain.drive_for(FORWARD, 1200, MM)
drivetrain.turn_for(LEFT, 95, DEGREES)
drivetrain.drive_for(FORWARD, 800, MM)
wait(5, SECONDS)
drivetrain.drive_for(REVERSE, 800, MM)
drivetrain.turn_for(LEFT, 95, DEGREES)
drivetrain.drive_for(FORWARD, 600, MM)
drivetrain.turn_for(LEFT, 95, DEGREES)
drivetrain.drive_for(FORWARD, 750, MM)
wait(3, SECONDS)
drivetrain.drive_for(REVERSE, 750, MM)
drivetrain.turn_for(LEFT, 95, DEGREES)
drivetrain.drive_for(FORWARD, 600, MM)
drivetrain.turn_for(LEFT, 95, DEGREES)
drivetrain.drive_for(FORWARD, 750, MM)
wait(5, SECONDS)
drivetrain.drive_for(REVERSE, 1500, MM)
